(function(){var component={name:"kanban_board",ccm:"https://akless.github.io/ccm/ccm.js",config:{html:{main:{tag:"main",inner:{id:"lanes"}},lane:{tag:"section","class":"lane",inner:[{tag:"header",inner:"%%"},{tag:"article","class":"cards"}]}},css:["ccm.load","../kanban_board/resources/default.css"],data:{store:["ccm.store"],key:"local"},lanes:["ToDo","Doing","Done"],kanban_card:["ccm.component","../kanban_card/ccm.kanban_card.js"]},Instance:function(){var self=this;var my;this.ready=function(callback){my=self.ccm.helper.privatize(self);callback()};this.start=function(callback){self.ccm.helper.dataset(my.data,function(dataset){if(!dataset.lanes)dataset.lanes=[];my.lanes.map(function(lane,i){if(!dataset.lanes[i])dataset.lanes[i]={cards:[]}});var main_elem=self.ccm.helper.html(my.html.main);var lanes_elem=main_elem.querySelector("#lanes");var counter=1;dataset.lanes.map(renderLane);check();function renderLane(lane,i){var lane_elem=self.ccm.helper.html(my.html.lane,my.lanes[i]);var cards_elem=lane_elem.querySelector(".cards");lane.cards.map(renderCard);lanes_elem.appendChild(lane_elem);function renderCard(card_cfg){counter++;var card_elem=document.createElement("div");cards_elem.appendChild(card_elem);my.kanban_card.start(self.ccm.helper.clone(card_cfg),function(card_inst){card_inst.root.classList.add("card");card_inst.root.setAttribute("draggable","true");card_inst.root.addEventListener("dragstart",function(event){event.dataTransfer.setData("text",getPosition(event.target).join(","))});card_inst.root.addEventListener("dragover",function(event){event.preventDefault()});card_inst.root.addEventListener("drop",function(event){moveCard(event.dataTransfer.getData("text").split(",").map(function(value){return parseInt(value)}),getPosition(event.target))});cards_elem.replaceChild(card_inst.root,card_elem);check()});function getPosition(card_elem){var lane_elem=self.ccm.helper.findParentElementByClass(card_elem,"lane");var x=self.ccm.helper.makeIterable(lane_elem.parentNode.children).indexOf(lane_elem);var y=self.ccm.helper.makeIterable(card_elem.parentNode.children).indexOf(card_elem);return[x,y]}function moveCard(from,to){if(from[0]===to[0]&&(from[1]===to[1]||from[1]===to[1]-1))return;var card=dataset.lanes[from[0]].cards[from[1]];dataset.lanes[from[0]].cards[from[1]]=null;dataset.lanes[to[0]].cards.splice(to[1],0,card);if(dataset.lanes[from[0]].cards[from[1]]!==null)from[1]++;dataset.lanes[from[0]].cards.splice(from[1],1);if(my.data.store)my.data.store.set(dataset,function(){self.start()})}}}function check(){counter--;if(counter!==0)return;self.ccm.helper.setContent(self.element,main_elem);if(callback)callback()}})}}};function p(){window.ccm[v].component(component)}var f="ccm."+component.name+(component.version?"-"+component.version.join("."):"")+".js";if(window.ccm&&null===window.ccm.files[f])window.ccm.files[f]=component;else{var n=window.ccm&&window.ccm.components[component.name];n&&n.ccm&&(component.ccm=n.ccm),"string"==typeof component.ccm&&(component.ccm={url:component.ccm});var v=component.ccm.url.split("/").pop().split("-");if(v.length>1?(v=v[1].split("."),v.pop(),"min"===v[v.length-1]&&v.pop(),v=v.join(".")):v="latest",window.ccm&&window.ccm[v])p();else{var e=document.createElement("script");document.head.appendChild(e),component.ccm.integrity&&e.setAttribute("integrity",component.ccm.integrity),component.ccm.crossorigin&&e.setAttribute("crossorigin",component.ccm.crossorigin),e.onload=function(){p(),document.head.removeChild(e)},e.src=component.ccm.url}}})();